using AWS.Views;
using PortsWork;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO.Ports;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace АРМ_настройка_PLC.ViewModels
{
    class DevicesCommunication
    {
        public PortMultimeter multimeter;
        public PortGenerator generator;
        public ModbusRTU PLC;
        public List<VisaDeviceInformation> usbDevicesInfo;
        public GeneratorAKIP3407x generatorAKIP3407X;

        public byte address { get; set; }
        public int TimeSleep {  get; set; }

        public double currentVolt;
        public bool DC_Read = false;
        public string messege {  get; set; }
        

        public DevicesCommunication()
        {
            multimeter = new PortMultimeter();
            generator = new PortGenerator();
            PLC = new ModbusRTU();
            generatorAKIP3407X = new GeneratorAKIP3407x();
        }

        public void CloseConnection()
        {
            
            multimeter.ClosePort();
            generator.ClosePort();
            PLC.ClosePort();
        }
        


        public Port SetMeasureDeviceName( Port device, string name )
        {
            if ( name.Contains( "COM" ))
            {
                device.SetName( name );
            } else
            {
                VisaDeviceInformation info = usbDevicesInfo.Find( t => name.Contains( t.devType ) );
                device.usbInfo = info;
                device.SetName( info.description );
            }
            return device.IdentifyDeviceType();
        }
        public string[] GetAllPorts()
        {
            usbDevicesInfo = Port.FindVisaDevicesInfo();
            List<string> usbInfo = new List<string>();
            usbDevicesInfo.ForEach(t => usbInfo.Add(t.GetInfo()));

            return usbInfo.Concat(SerialPort.GetPortNames()).ToArray();
        }
        public void SetPassword()
        {
            Debug.WriteLine("записываю пароль");
            PLC.SetValue(address,Registers.REGISTER_ADRESS_PASSWORD,Registers.PASSWORD, TimeSleep);
            Check_Change(Registers.PASSWORD, Registers.REGISTER_ADRESS_PASSWORD);
        }
        public void Save_Change()
        {
            Debug.WriteLine("сохранил значения");
            PLC.SetValue(address, Registers.REGISTER_ADRESS_PASSWORD, Registers.SAVE_CHANGE, TimeSleep);
            messege = "Сохранил значения";
        }
        public bool Check_Change(float value, int reg_adress)
        {
            Debug.WriteLine($"проверяю значения {value}");
            
                if (value == PLC.GetHoldingFloat(address, reg_adress, TimeSleep))
                {
                    Debug.WriteLine($"значение {value} записано");
                    return true;
                }
                else
                {
                    Debug.WriteLine($"значение {value} не удалось записать");
                    messege = ("Не удалось записать значнеие в регистр");
                }
              
            Debug.WriteLine($"значение {value} не записано");
            return false;
        }
        private bool Check_Change(int value, int reg_adress)
        {
            Debug.WriteLine($"проверяю значения {value}");
            

                if (value == PLC.GetHoldingFloat(address, reg_adress, TimeSleep))
                {
                    Debug.WriteLine($"значение {value} записано");
                    return true;
                }
                else
                {
                    Debug.WriteLine($"значение {value} не удалось записать");
                    messege = ("Не удалось записать значнеие в регистр");
                }

            Debug.WriteLine($"значение {value} не записано");
            return false;
        }
        public void Write_Reg(float value, int reg_adress)
        {
            Debug.WriteLine("записываю значения");
            SetPassword();
            PLC.SetFloatValue(address, reg_adress, value, TimeSleep);
            if ( Check_Change(value, reg_adress))
            {
                Save_Change();
            }
        }
        public void Write_Reg(int value, int reg_adress)
        {
            Debug.WriteLine("записываю значения");
            SetPassword();
            PLC.SetFloatValue(address, reg_adress, value, TimeSleep);
            if (Check_Change(value, reg_adress))
            {
                Save_Change();
            }
        }
        #region Мультиметр
        private void AverageValue(out float Value)
        {
            Value = PLC.GetHoldingFloat(address,Registers.REGISTER_ADRESS_VOLTAGE, TimeSleep);
            for (int j = 0; j < 9; j++)
            {
                Value = PLC.GetHoldingFloat(address, Registers.REGISTER_ADRESS_VOLTAGE, TimeSleep);
            }
        }



        #endregion
    }
}
